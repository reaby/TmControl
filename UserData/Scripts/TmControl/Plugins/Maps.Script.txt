// #RequireContext CServerPlugin
#Include "TmControl/Libs/File.Script.txt" as File
#Include "TmControl/Libs/Ui.Script.txt" as UI
#Include "TmControl/Core/serverManager.Script.txt" as Server
#Include "TmControl/Core/config.Script.txt" as Config
#Include "TextLib" as TL

#Struct K_Map {
	Text Name;
	Text Comments;
	Text Uid;
	Integer Index;
}
Text GenMapList() {
	declare Text Out = "";
	declare Integer Idx = 1;

	foreach (Map in MapList) {
		declare K_Map MapJson = K_Map{ Name = Map.Name, Uid = Map.MapUid, Comments = Map.Comments, Index = (Idx-1)};
		declare Text Partial = TL::Replace(MapJson.tojson(), "\"", "'");
		Out ^= """
		<frame pos="0 -{{{(Idx-1)*6}}}" size="156 5" id="{{{ Map.MapUid }}}" data-json="{{{ Partial }}}">
		<label pos="1 -4.5"  size="12 4" text="{{{Idx}}}" textsize="2" valign="bottom"/>
		<label pos="11 -4.5"  size="20 4" text="{{{ TL::TimeToText(Map.TMObjective_AuthorTime, True, True) }}}" textsize="2" valign="bottom"/>
		<label pos="32 -4.5"  size="51 4" text="{{{ Map.Name }}}" textsize="2" valign="bottom"/>
		<label pos="83 -4.5"  size="51 4"  text="{{{ Map.AuthorNickName }}}" textsize="2" focusareacolor1="0000" valign="bottom" selecttext="1"/>
		<quad z-index="-1" class="selector" size="135 5" bgcolor="3af" scriptevents="1" opacity="0.1"/>
		</frame>""";
		Idx +=1;
	}
	return Out;
}

Void ShowMaps(CClient _Client) {
	declare Text Xml = File::Read("TmControl/UI/Admin/maps.xml");
	Xml = TL::Replace(Xml, "<!--%maps%-->", GenMapList());
	Xml = TL::Replace(Xml, "%admin%", TL::ToText(Config::IsAdmin(_Client)));
	UI::Create("MapPanel", Xml);
	UI::Show("MapPanel", _Client);
}

Void HideMaps(CClient _Client) {
	UI::Hide("MapPanel", _Client);
}

Void ShowVoteWindow() {
	UI::Show("VotePanel");
}

Void OnUiEvent(CUIConfigEvent _UIEvent) {
	declare Text[] Data = _UIEvent.CustomEventData;
	declare Text Param = Data[1];
	declare CClient Client <=> GetClient(_UIEvent.UI);
	switch (Data[0]) {
		case "GotoMap": {
			if (Config::IsAdmin(Client)) {
				NextMapIndex = TL::ToInteger(Param);
				Server::MapSkip(True);
			}
			HideMaps(Client);
		}
		case "QueueMap": {
			if (Config::IsAdmin(Client)) {
				NextMapIndex = TL::ToInteger(Param);
			}
			HideMaps(Client);
		}
		case "Close": {
			HideMaps(Client);
		}
	}
}