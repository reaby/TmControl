// #RequireContext CServerPlugin
#Include "TmControl/Libs/File.Script.txt" as File
#Include "TmControl/Libs/Ui.Script.txt" as UI
#Include "TMControl/Core/serverManager.Script.txt" as Server
#Include "TextLib" as TL

#Struct Mapp {
    Text Name;
    Text Comments;
    Text Uid;
    Integer Index;
}

Text genMapsList() {
    declare Text out = "";
    declare Integer i = 1;
    
    foreach (Map in MapList) {
        declare Mapp mapjson = Mapp{ Name = Map.Name, Uid = Map.MapUid, Comments = Map.Comments, Index = (i-1)};
        declare Text partial = TL::Replace(mapjson.tojson(), "\"", "'");
        out ^= """
        <frame pos="0 -{{{(i-1)*6}}}" size="156 5" id="{{{ Map.MapUid }}}" data-json="{{{ partial }}}">
            <label pos="1 -4.5"  size="12 4" text="{{{i}}}" textsize="2" valign="bottom"/>
            <label pos="11 -4.5"  size="20 4" text="{{{ TL::TimeToText(Map.TMObjective_AuthorTime, True, True) }}}" textsize="2" valign="bottom"/>
            <label pos="32 -4.5"  size="51 4" text="{{{ Map.Name }}}" textsize="2" valign="bottom"/>
            <label pos="83 -4.5"  size="51 4"  text="{{{ Map.AuthorNickName }}}" textsize="2" focusareacolor1="0000" valign="bottom" selecttext="1"/>
            <quad class="selector" size="135 5" bgcolor="999" scriptevents="1" opacity="0"/>
        </frame>""";
        i +=1;
    }
    return out;
}

Void ShowMaps(CClient _Client) {
    declare Text xml = File::Read("TmControl/UI/maps.xml");
    xml = TL::Replace(xml, "<!--%maps%-->", genMapsList());
    UI::Create("MapPanel", xml);
    UI::Show("MapPanel", _Client);
}

Void HideMaps(CClient _Client) {
    UI::Hide("MapPanel", _Client);
}

Void OnUiEvent(CUIConfigEvent UiEvent) {
    declare Text[] data = UiEvent.CustomEventData;
    declare Text param = data[1];
    declare CClient Client <=> GetClient(UiEvent.UI);
    switch (data[0]) {
        case "GotoMap": {
            NextMapIndex = TL::ToInteger(param);
            Server::MapSkip();
            HideMaps(Client);
        }
        case "QueueMap": {
            NextMapIndex = TL::ToInteger(param);
            HideMaps(Client);
        }
        case "Close": {
            HideMaps(Client);
        }
    }
    
}