// #RequireContext CServerPlugin
#Include "TmControl/Libs/Ui.Script.txt" as UI
#Include "TextLib" as TL
#Include "MathLib" as ML

/**
Text ModeCallbackType Trackmania._Event.WayPoint
Text[] ModeCallbackData [{
	"time": 21450260,
	"login": "",
	"accountid": "",
	"racetime": 1,
	"laptime": 1,
	"checkpointinrace": 0,
	"checkpointinlap": 0,
	"isendrace": false,
	"isendlap": false,
	"isindependentlaps": false,
	"curracecheckpoints": [19450],
	"curlapcheckpoints": [19450],
	"blockid": "#50331649",
	"speed": 54.71880
}]
*/


#Struct K_WayPoint {
	Integer time;
	Text login;
	Real speed;
	Integer laptime;
	Integer checkpointinlap;
}

#Struct K_CpInfo {
	Integer index;
	Text trigram;
	Integer time;
	Integer speed;
}

#Const C_widgetMaxCp 21

declare K_CpInfo[] G_BestCpsData;

Text GetManialink() {
	declare Integer MaxColumns = 6;
	declare Integer MaxRows = 2;
	declare Integer PosY = 89;
	declare Integer Index = 0;

	declare Text Out = """
	<?xml version="1.0" encoding="utf-8" standalone="yes"?>
	<manialink version="3" name="TmControl.Widget.BestCps">
	<stylesheet>
	<style class="center" halign="left" valign="center2" textsize="1" />
	</stylesheet>
	""";

	for (row, 0, MaxRows) {
		for (column, 0, MaxColumns) {
			Out ^= """
			<frame pos="{{{-130 + (column*37)}}} {{{ PosY- (row*5) }}}" id="cp_{{{Index}}}" hidden="1">
			<label pos="2 -2" size="4 4" halign="center" text="" class="center" textsize="1" />
			<label pos="5 -2" size="12 4" text=""  class="center" textsize="0.5" />
			<label pos="17.7 -2" size="19 4" text="" class="center" textsize="1" />
			<quad pos="0 0" size="4 4" bgcolor="0007" halign="left" z-index="-2"/>
			<quad pos="4.5 0" size="12 4" bgcolor="0004" halign="left" z-index="-2"/>
			<quad pos="17 0" size="19 4" bgcolor="0004" halign="left" z-index="-2"/>

			</frame>""";
			Index +=1;
		}
	}
	Out ^= """
	<script><!--
	#Include "MathLib" as ML
	#Include "TextLib" as TL
	#Struct K_CpInfo {
		Integer index;
		Text trigram;
		Integer time;
		Integer speed;
	}

	declare K_CpInfo[] G_BestCps;

	Void updateWidgetData() {
		foreach (data in G_BestCps) {
			declare CMlFrame frame <=> (Page.GetFirstChild("cp_"^data.index) as CMlFrame);
			if (frame != Null) {
				if (data.time == -1) {
					frame.Hide();
				}
				if (data.time > -1) {
					(frame.Controls[0] as CMlLabel).Value = ""^(data.index+1);
					(frame.Controls[1] as CMlLabel).Value = TL::TimeToText(data.time, True, True);
					(frame.Controls[2] as CMlLabel).Value = data.trigram;
					//(frame.Controls[3] as CMlLabel).Value = data.speed^"km/h";
					frame.Show();
				}
			}
		}
	}

	main() {
		declare Text tmcontrol_bestcps_data for LocalUser = "[]";
		declare Integer tmcontrol_bestcps_update for LocalUser = 0;
		declare Integer LastUpdate = 0;
		LastUpdate = 0;
		tmcontrol_bestcps_update = 0;

		while (True) {
			yield;
			if (tmcontrol_bestcps_update != LastUpdate) {
				LastUpdate = tmcontrol_bestcps_update;
				G_BestCps.fromjson(TL::Replace(tmcontrol_bestcps_data, "'", "\""));
				updateWidgetData();
			}
		}
	}
	--></script>
	""";
	Out ^= """</manialink>""";

	return Out;
}

Void Update() {
	declare Text Out = G_BestCpsData.tojson();
	Out = TL::Replace(Out, "\"", "'");

	declare Text Xml = """
	<manialink version="3" name="TmControl.Widget.BestCpsUpdater">
	<script><!--
	main() {
		declare Integer tmcontrol_bestcps_update for LocalUser;
		declare Text tmcontrol_bestcps_data for LocalUser = "[]";
		tmcontrol_bestcps_data = "{{{ Out }}}";
		tmcontrol_bestcps_update = {{{ Now }}};
	}
	--></script>
	</manialink>
	""";

	UI::Create("BestCpsUpdater", Xml);
	UI::Show("BestCpsUpdater");
}

Void Reset() {
	G_BestCpsData.clear();
	for(Idx, 0, C_widgetMaxCp) {
		G_BestCpsData.add(K_CpInfo{index = Idx, time = -1});
	}
	Update();
}

Void Init() {
	UI::Create("WidgetBestCps", GetManialink());
	UI::Show("WidgetBestCps");
	Reset();
}

Void OnModeEvent(CServerPluginEvent _Event) {
	switch (_Event.ModeCallbackType) {
		case "Maniaplanet.Podium_Start": {
			Reset();
		}

		case "Maniaplanet.StartMap_End": {
			Reset();
		}

		case "Trackmania.Event.WayPoint": {
			declare K_WayPoint Waypoint;
			Waypoint.fromjson(_Event.ModeCallbackData[0]);
			declare Integer Idx = Waypoint.checkpointinlap;
			if (Waypoint.checkpointinlap <= C_widgetMaxCp) {
				if (G_BestCpsData.existskey(Idx)) {
					if (G_BestCpsData[Idx].time == -1 || Waypoint.laptime < G_BestCpsData[Idx].time) {
						declare CUser User <=> GetClient(Waypoint.login).User;
						declare K_CpInfo Cp = K_CpInfo {
							index = Waypoint.checkpointinlap,
							speed = ML::NearestInteger(Waypoint.speed*3.6),
							trigram = User.Name,
							time = Waypoint.laptime
						};
						G_BestCpsData[Waypoint.checkpointinlap] = Cp;
						Update();
					}
				}
			}
		}
	}
}