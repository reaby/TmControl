// #RequireContext CServerPlugin

// @todo enable plugins when things evolve

#Include "TmControl/Libs/File.Script.txt" as File
#Include "TmControl/Libs/Ui.Script.txt" as UI
#Include "TMControl/Core/serverManager.Script.txt" as Server
#Include "TextLib" as TL
#Include "MathLib" as ML
/**
Text ModeCallbackType Trackmania.Event.WayPoint
Text[] ModeCallbackData [{
    "time": 21450260,
    "login": "",
    "accountid": "",
    "racetime": 1,
    "laptime": 1,
    "checkpointinrace": 0,
    "checkpointinlap": 0,
    "isendrace": false,
    "isendlap": false,
    "isindependentlaps": false,
    "curracecheckpoints": [19450],
    "curlapcheckpoints": [19450],
    "blockid": "#50331649",
    "speed": 54.71880
}]
*/

#Struct WayPoint {
    Integer time;
    Text login;
    Real speed;
    Integer[] curlapcheckpoints;
    Integer checkpointinlap;
}


#Struct CpInfo {
    Integer index;
    Text trigram;
    Integer time;
    Integer speed;
}

#Const C_widgetMaxCp 18

declare CpInfo[] BestCpsData;

Text getManialink() {
    declare Integer maxColumns = 9;
    declare Integer maxRows = 3;
    declare Integer y = 89;
    declare Integer index = 0;
    
    declare out = """
    <?xml version="1.0" encoding="utf-8" standalone="yes"?>
    <manialink version="3" name="TmControl.Widget.BestCps">
    <stylesheet>
    <style class="center" halign="center" valign="center" textsize="1" />
    </stylesheet>
    """;
    
    for (row, 0, maxRows) {
        for (column, 0, maxColumns) {
            out ^= """
            <frame pos="{{{-130 + (column*37)}}} {{{ y- (row*5) }}}" id="cp_{{{index}}}" hidden="1">
            <label pos="2 -2"  size="4 4" text="" class="center"/>
            <label pos="7 -2" size="8 4" text=""  class="center"/>
            <label pos="18 -2" size="12 4" text="" class="center"/>
            <label pos="30 -2" size="12 4" text="" textsize="0.8"  class="center"/>
            <quad pos="0 0" size="36 4" bgcolor="0004" halign="left"/>
            </frame>""";
            index +=1;
        }
    }
    out ^= """
    <script><!--
    #Include "MathLib" as ML
    #Include "TextLib" as TL
    #Struct CpInfo {
        Integer index;
        Text trigram;
        Integer time;
        Integer speed;
    }
    
    Text formatTime(Integer _Time) {
        if (_Time == 0) return "0:00.00";
        
        declare Time = ML::Abs(_Time);
        declare Sign = "";
        if (_Time < 0) Sign = "-";
        
        declare Milliseconds = Time % 1000;
        declare Seconds = (Time / 1000) % 60;
        declare Minutes = (Time / 60000) % 60;
        declare Hours = (Time / 3600000) % 24;
        declare Days = Time / 86400000;
        
        if (Days > 0) {
            return Sign ^ Days ^ ":" ^ TL::FormatInteger(Hours, 2) ^ ":" ^ TL::FormatInteger(Minutes, 2) ^ ":" ^ TL::FormatInteger(Seconds, 2) ^ "." ^ TL::FormatInteger(Milliseconds, 3);
        }
        
        if (Hours > 0) {
            return Sign ^ Hours ^ ":" ^ TL::FormatInteger(Minutes, 2) ^ ":" ^ TL::FormatInteger(Seconds, 2)^ "."  ^ TL::FormatInteger(Milliseconds, 3);
        }
        
        return Sign ^ Minutes ^ ":" ^ TL::FormatInteger(Seconds, 2) ^ "." ^ TL::FormatInteger(Milliseconds, 3);
    }
    
    
    declare CpInfo[] bestCps;
    
    Void updateWidgetData() {
        foreach (data in bestCps) {
            declare CMlFrame frame <=> (Page.GetFirstChild("cp_"^data.index) as CMlFrame); 
            if (frame != Null) {
                if (data.time == -1) {
                    frame.Hide();
                }
                if (data.time > -1) {
                    (frame.Controls[0] as CMlLabel).Value = ""^(data.index+1);
                    (frame.Controls[1] as CMlLabel).Value = data.trigram;
                    (frame.Controls[2] as CMlLabel).Value = formatTime(data.time);
                    (frame.Controls[3] as CMlLabel).Value = data.speed^"km/h";
                    frame.Show();
                }
            }
        }
    }
    
    main() {
        declare Text tmcontrol_bestcps_data for LocalUser = "[]";
        declare Integer tmcontrol_bestcps_update for LocalUser = 0;
        declare Integer LastUpdate = 0;
        LastUpdate = 0;
        tmcontrol_bestcps_update = 0;
        
        while (True) {
            yield;
            if (tmcontrol_bestcps_update != LastUpdate) {
                LastUpdate = tmcontrol_bestcps_update;
                bestCps.fromjson(TL::Replace(tmcontrol_bestcps_data, "'", "\""));
                updateWidgetData();
            }
        }
    }
    --></script>
    """;
    out ^= """</manialink>""";
    return out;
}

Void Update() {
    declare out = BestCpsData.tojson();
    out = TL::Replace(out, "\"", "'");
    
    declare Text xml = """
        <manialink version="3" name="TmControl.Widget.BestCpsUpdater">
        <script><!-- 
        main() {
            declare Integer tmcontrol_bestcps_update for LocalUser;
            declare Text tmcontrol_bestcps_data for LocalUser = "[]";
            tmcontrol_bestcps_data = "{{{ out }}}";
            tmcontrol_bestcps_update = {{{ Now }}}; 
        }
        --></script>
        </manialink>
    """;
    
    UI::Create("BestCpsUpdater", xml);
    UI::Show("BestCpsUpdater");
}

Void Reset() {
    BestCpsData.clear();
    for(i, 0, C_widgetMaxCp) {
        BestCpsData.add(CpInfo{index = i, time = -1});
    }
    Update();
}



Void Init() {
    UI::Create("WidgetBestCps", getManialink());
    UI::Show("WidgetBestCps");
    Reset();
}

Void OnModeEvent(CServerPluginEvent Event) {
    switch (Event.ModeCallbackType) {
        case "Maniaplanet.Podium_Start": {
            Reset();
        }

        case "Maniaplanet.StartMap_End": {
            Reset();
        }

        case "Trackmania.Event.WayPoint": {
            declare WayPoint waypoint;
            waypoint.fromjson(Event.ModeCallbackData[0]);
            declare Integer i = waypoint.checkpointinlap;
            if (waypoint.checkpointinlap < C_widgetMaxCp) {
                if (BestCpsData.existskey(i)) {
                    if (BestCpsData[i].time == -1 || waypoint.curlapcheckpoints[i] < BestCpsData[i].time) {
                        declare CUser User <=> GetClient(waypoint.login).User;
                        declare CpInfo cp = CpInfo {
                            index = waypoint.checkpointinlap,
                            speed = ML::NearestInteger(waypoint.speed*3.6),
                            time = waypoint.curlapcheckpoints[i],
                            trigram = User.Trigram
                        };
                        BestCpsData[waypoint.checkpointinlap] = cp;
                        Update();
                    }
                }
            }
        }
        default: {
          //   log(Event);
        }
    }
}